pipeline {
    agent any

    environment {
        IMAGE_NAME = 'billet-mahaleo'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        CONTAINER_NAME = 'billet-mahaleo-container'
        NEXT_PUBLIC_PORT = '3135'
        NEXT_PUBLIC_FRONTEND_BASE_URL = 'http://localhost:3135'
        NEXT_PUBLIC_API_URL = 'http://localhost:3135/api'
    }

    stages {

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building the Docker image with environment variables...'
                    sh """
                    docker build \
                        --build-arg NEXT_PUBLIC_PORT=${NEXT_PUBLIC_PORT} \
                        --build-arg NEXT_PUBLIC_FRONTEND_BASE_URL=${NEXT_PUBLIC_FRONTEND_BASE_URL} \
                        --build-arg NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
                        -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }


        stage('Deploy Containers') {
            steps {
                script {
                    echo 'Checking if the container is already running...'
                    sh """
                    if [ "\$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
                        echo "Stopping and removing existing container..."
                        docker stop ${CONTAINER_NAME}
                        docker rm ${CONTAINER_NAME}
                    fi
                    """

                    echo 'Running the Docker container with environment variables...'
                    sh """
                    docker run -d --name ${CONTAINER_NAME} \
                        -e NEXT_PUBLIC_PORT=${NEXT_PUBLIC_PORT} \
                        -e NEXT_PUBLIC_FRONTEND_BASE_URL=${NEXT_PUBLIC_FRONTEND_BASE_URL} \
                        -e NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
                        -p ${NEXT_PUBLIC_PORT}:${NEXT_PUBLIC_PORT} \
                        ${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }
    }
}
