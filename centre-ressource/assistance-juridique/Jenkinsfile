pipeline {
    agent any

    environment {
        REGISTRY         = 'harbor.tsirylab.com'
        HARBOR_PROJECT   = 'pnud-agvm'
        IMAGE_NAME       = 'assistance-juridique'
        IMAGE_TAG        = "${BUILD_NUMBER}"
        FULL_IMAGE_NAME  = "${REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
        NAMESPACE        = 'pnud-agvm'
        K8S_DIR          = 'k8s'
        DEPLOYMENT_NAME  = 'assistance-juridique'
        SERVICE_NAME     = 'assistance-juridique-service'
        HPA_NAME         = 'assistance-juridique-hpa'
        SECRET_NAME      = 'assistance-juridique-secret'
        VITE_PORT        = '4013'
        VITE_API_URL     = 'https://gateway.tsirylab.com'
        VITE_AUTH_TOKEN_KEY = 'access_token'
        VITE_DISABLE_AUTH = 'false'
        VITE_APP_NAME = 'assistance-juridique'
    }

    stages {
        stage('Build & Push') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'harbor-credentials',
                                     usernameVariable: 'HARBOR_USER',
                                     passwordVariable: 'HARBOR_PASS')
                ]) {
                    sh '''
                        set -e
                        docker logout ${REGISTRY} || true

                        docker build \
                          --build-arg VITE_API_URL=${VITE_API_URL} \
                          --build-arg VITE_PORT=${VITE_PORT} \
                          --build-arg VITE_AUTH_TOKEN_KEY=${VITE_AUTH_TOKEN_KEY} \
                          --build-arg VITE_DISABLE_AUTH=${VITE_DISABLE_AUTH} \
                          --build-arg VITE_APP_NAME=${VITE_APP_NAME} \
                          -t ${FULL_IMAGE_NAME} .

                        echo ${HARBOR_PASS} | \
                          docker login -u ${HARBOR_USER} --password-stdin ${REGISTRY}

                        docker push ${FULL_IMAGE_NAME}
                        docker logout ${REGISTRY}
                    '''
                }
            }
        }

        stage('Deploy to K3s') {
            steps {
                withCredentials([
                    file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG'),
                    usernamePassword(credentialsId: 'harbor-credentials',
                                     usernameVariable: 'HARBOR_USER',
                                     passwordVariable: 'HARBOR_PASS')
                ]) {
                    sh '''
                        set -e
                        export KUBECONFIG=${KUBECONFIG}

                        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

                        kubectl delete secret harbor-registry-secret -n ${NAMESPACE} --ignore-not-found
                        kubectl create secret docker-registry harbor-registry-secret \
                          --docker-server=${REGISTRY} \
                          --docker-username="${HARBOR_USER}" \
                          --docker-password="${HARBOR_PASS}" \
                          --namespace=${NAMESPACE}

                        kubectl delete secret ${SECRET_NAME} -n ${NAMESPACE} --ignore-not-found
                        kubectl create secret generic ${SECRET_NAME} \
                          --from-literal=VITE_API_URL="${VITE_API_URL}" \
                          --from-literal=VITE_AUTH_TOKEN_KEY="${VITE_AUTH_TOKEN_KEY}" \
                          --from-literal=VITE_DISABLE_AUTH="${VITE_DISABLE_AUTH}" \
                          --from-literal=VITE_APP_NAME="${VITE_APP_NAME}" \
                          --from-literal=VITE_PORT="${VITE_PORT}" \
                          --namespace=${NAMESPACE}

                        # template toutes les ressources
                        for res in deployment service hpa secret; do
                            envsubst < ${K8S_DIR}/${DEPLOYMENT_NAME}.$res.yaml > /tmp/${DEPLOYMENT_NAME}.$res.yaml
                            kubectl apply -f /tmp/${DEPLOYMENT_NAME}.$res.yaml
                        done

                        kubectl rollout status deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE} --timeout=600s
                        kubectl get pods -n ${NAMESPACE} -l app=${DEPLOYMENT_NAME}
                    '''
                }
            }
        }
    }

    post { always { cleanWs() } }
}