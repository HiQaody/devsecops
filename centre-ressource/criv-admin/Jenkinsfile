pipeline {
    agent any

    environment {
        REGISTRY = "harbor.tsirylab.com"
        HARBOR_PROJECT = "pnud-agvm"
        IMAGE_NAME = "admin-agvm"
        IMAGE_TAG = "latest"
        FULL_IMAGE_NAME = "${REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
        DEPLOYMENT_NAME = "admin-agvm-deployment"
        NAMESPACE = "pnud-agvm"
        VITE_PORT = "4006"
        K8S_DIR = "k8s"
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building the Docker image...'
                    sh """
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${FULL_IMAGE_NAME}
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'harbor-credentials', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    script {
                        echo 'Logging in to Harbor...'
                        sh """
                            echo "${HARBOR_PASS}" | docker login -u "${HARBOR_USER}" --password-stdin ${REGISTRY}
                            docker push ${FULL_IMAGE_NAME}
                            docker logout ${REGISTRY}
                        """
                    }
                }
            }
        }

        stage('Deploy to K3s') {
            steps {
                withCredentials([
                    file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG'),
                    string(credentialsId: 'GATEWAY_URL_ID', variable: 'VITE_API_URL')
                ]) {
                    script {
                        sh """
                            export KUBECONFIG=${KUBECONFIG}
                            kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            # Création ou mise à jour du secret admin-agvm-apiurl-secret
                            kubectl delete secret admin-agvm-apiurl-secret -n ${NAMESPACE} --ignore-not-found
                            kubectl create secret generic admin-agvm-apiurl-secret -n ${NAMESPACE} --from-literal=VITE_API_URL="${VITE_API_URL}"
                            kubectl apply -f ${K8S_DIR}/admin-agvm-deployment.yaml
                            kubectl apply -f ${K8S_DIR}/admin-agvm-service.yaml
                            kubectl apply -f ${K8S_DIR}/admin-agvm-hpa.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }
    }
}