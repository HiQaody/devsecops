pipeline {
    agent any

    environment {
        IMAGE_NAME = 'backend-cms'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        CONTAINER_NAME = 'backend-cms-container'
        DB_USERNAME = credentials('DB_USER_ID')
        DB_PASSWORD = credentials('DB_PASSWORD_ID')
        DB_HOST = credentials('DB_HOST_ID')
        DB_DATABASE = 'billet_mahaleo'
        DB_PORT = credentials('DB_PORT_ID')
        CLOUDINARY_CLOUD_NAME = credentials('CLOUDINARY_CLOUD_NAME_ID')
        CLOUDINARY_API_KEY = credentials('CLOUDINARY_API_KEY_ID')
        CLOUDINARY_API_SECRET = credentials('CLOUDINARY_API_SECRET_ID')
        GOOGLE_CLIENT_ID = credentials('GOOGLE_CLIENT_ID_ID')
        GOOGLE_CLIENT_SECRET = credentials('GOOGLE_CLIENT_SECRET_ID')
        EMAIL_USER = credentials('EMAIL_USER_ID')
        EMAIL_PASS = credentials('EMAIL_PASS_ID')
        PORT = '3136'
    }

    stages {

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building the Docker image with environment variables...'
                    sh """
                    docker build \
                        --build-arg DB_USERNAME=${DB_USERNAME} \
                        --build-arg DB_PASSWORD=${DB_PASSWORD} \
                        --build-arg DB_HOST=${DB_HOST} \
                        --build-arg DB_DATABASE=${DB_DATABASE} \
                        --build-arg DB_PORT=${DB_PORT} \
                        --build-arg PORT=${PORT} \
                        --build-arg CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME} \
                        --build-arg CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY} \
                        --build-arg CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET} \
                        --build-arg GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID} \
                        --build-arg GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET} \
                        --build-arg EMAIL_USER=${EMAIL_USER} \
                        --build-arg EMAIL_PASS=${EMAIL_PASS} \
                        -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }


        stage('Deploy Containers') {
            steps {
                script {
                    echo 'Checking if the container is already running...'
                    sh """
                    if [ "\$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
                        echo "Stopping and removing existing container..."
                        docker stop ${CONTAINER_NAME}
                        docker rm ${CONTAINER_NAME}
                    fi
                    """

                    echo 'Running the Docker container with environment variables...'
                    sh """
                    docker run -d --name ${CONTAINER_NAME} \
                        -e DB_USERNAME=${DB_USERNAME} \
                        -e DB_PASSWORD=${DB_PASSWORD} \
                        -e DB_HOST=${DB_HOST} \
                        -e DB_DATABASE=${DB_DATABASE} \
                        -e DB_PORT=${DB_PORT} \
                        -e CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME} \
                        -e CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY} \
                        -e CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET} \
                        -e GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID} \
                        -e GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET} \
                        -e EMAIL_USER=${EMAIL_USER} \
                        -e EMAIL_PASS=${EMAIL_PASS} \
                        -e PORT=${PORT} \
                        -p ${PORT}:${PORT} \
                        ${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }
    }
}
