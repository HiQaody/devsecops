pipeline {
    agent any
    environment {
        REGISTRY = 'harbor.tsirylab.com'
        HARBOR_PROJECT = 'pnud-agvm'
        IMAGE_NAME = 'serviceoffre'
        IMAGE_TAG = 'latest'
        FULL_IMAGE_NAME = "${REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
        DEPLOYMENT_NAME = 'serviceoffre-deployment'
        SECRET_NAME = 'serviceoffre-secret'
        SERVICE_NAME = 'serviceoffre-service'
        NAMESPACE = 'pnud-agvm'
        PORT = '5007'
        DB_NAME = 'serviceoffre'
        K8S_DIR = 'k8s'
    }
    stages {
        stage('Build Docker Image') {
            steps {
                withCredentials([
                    string(credentialsId: 'POSTGRES_HOST_ID', variable: 'DB_HOST'),
                    string(credentialsId: 'POSTGRES_PORT_ID', variable: 'DB_PORT'),
                    string(credentialsId: 'POSTGRES_USER_ID', variable: 'DB_USER'),
                    string(credentialsId: 'POSTGRES_PASSWORD_ID', variable: 'DB_PASSWORD'),
                ]) {
                    script {
                        echo 'Building the Docker image with environment variables...'
                        sh """
                            docker build \\
                                --build-arg DB_HOST=${DB_HOST} \\
                                --build-arg DB_PORT=${DB_PORT} \\
                                --build-arg DB_USER=${DB_USER} \\
                                --build-arg DB_PASSWORD=${DB_PASSWORD} \\
                                --build-arg DB_NAME=${DB_NAME} \\
                                --build-arg PORT=${PORT} \\
                                -t ${IMAGE_NAME}:${IMAGE_TAG} .
                            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${FULL_IMAGE_NAME}
                        """
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'harbor-credentials', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    script {
                        echo 'Logging in to Harbor...'
                        sh """
                            echo "${HARBOR_PASS}" | docker login -u "${HARBOR_USER}" --password-stdin ${REGISTRY}
                            docker push ${FULL_IMAGE_NAME}
                            docker logout ${REGISTRY}
                        """
                    }
                }
            }
        }
        stage('Deploy to K3s') {
            steps {
                withCredentials([
                    file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG'),
                    string(credentialsId: 'POSTGRES_HOST_ID', variable: 'DB_HOST'),
                    string(credentialsId: 'POSTGRES_PORT_ID', variable: 'DB_PORT'),
                    string(credentialsId: 'POSTGRES_USER_ID', variable: 'DB_USER'),
                    string(credentialsId: 'POSTGRES_PASSWORD_ID', variable: 'DB_PASSWORD'),
                    usernamePassword(credentialsId: 'harbor-credentials', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')
                ]) {
                    script {
                        sh """
                            export KUBECONFIG=${KUBECONFIG}
                            kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

                            # Création du secret pour le registre Harbor
                            kubectl create secret docker-registry harbor-registry-secret -n ${NAMESPACE} \
                                --docker-server=${REGISTRY} \
                                --docker-username=${HARBOR_USER} \
                                --docker-password=${HARBOR_PASS} \
                                --dry-run=client -o yaml | kubectl apply -f -

                            # Création/mise à jour du secret applicatif
                            kubectl delete secret ${SECRET_NAME} -n ${NAMESPACE} --ignore-not-found
                            kubectl create secret generic ${SECRET_NAME} -n ${NAMESPACE} \\
                                --from-literal=DB_HOST="${DB_HOST}" \\
                                --from-literal=DB_PORT="${DB_PORT}" \\
                                --from-literal=DB_USER="${DB_USER}" \\
                                --from-literal=DB_PASSWORD="${DB_PASSWORD}" \\

                            # Application des manifests
                            kubectl apply -f ${K8S_DIR}/${DEPLOYMENT_NAME}.yaml
                            kubectl apply -f ${K8S_DIR}/${SERVICE_NAME}.yaml
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }
    }
}
