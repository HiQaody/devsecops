pipeline {
    agent any

    environment {
        REGISTRY         = "harbor.tsirylab.com"
        HARBOR_PROJECT   = "pnud-agvm"
        IMAGE_NAME       = "serviceupload"
        IMAGE_TAG        = "latest"
        FULL_IMAGE_NAME  = "${REGISTRY}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
        DEPLOYMENT_NAME  = "serviceupload-deployment"
        NAMESPACE        = "pnud-agvm"
        PORT             = "5012"
        MINIO_BUCKET     = "diamadio"
        K8S_DIR          = "k8s"
    }

    stages {
        stage('Build Docker Image') {
            steps {
                withCredentials([
                    string(credentialsId: 'MINIO_END_POINT_ID', variable: 'MINIO_END_POINT'),
                    string(credentialsId: 'MINIO_PORT_ID', variable: 'MINIO_PORT'),
                    string(credentialsId: 'MINIO_ACCESS_KEY_ID', variable: 'MINIO_ACCESS_KEY'),
                    string(credentialsId: 'MINIO_SECRET_KEY_ID', variable: 'MINIO_SECRET_KEY')
                ]) {
                    script {
                        echo 'Building the Docker image with environment variables...'
                        sh """
                            docker build \\
                                --build-arg MINIO_END_POINT=${MINIO_END_POINT} \\
                                --build-arg MINIO_PORT=${MINIO_PORT} \\
                                --build-arg MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} \\
                                --build-arg MINIO_SECRET_KEY=${MINIO_SECRET_KEY} \\
                                --build-arg MINIO_BUCKET=${MINIO_BUCKET} \\
                                -t ${IMAGE_NAME}:${IMAGE_TAG} .
                            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${FULL_IMAGE_NAME}
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'harbor-credentials', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    script {
                        echo 'Logging in to Harbor...'
                        sh """
                            echo "${HARBOR_PASS}" | docker login -u "${HARBOR_USER}" --password-stdin ${REGISTRY}
                            docker push ${FULL_IMAGE_NAME}
                            docker logout ${REGISTRY}
                        """
                    }
                }
            }
        }

        stage('Deploy to K3s') {
            steps {
                withCredentials([
                    file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG'),
                    string(credentialsId: 'MINIO_END_POINT_ID', variable: 'MINIO_END_POINT'),
                    string(credentialsId: 'MINIO_PORT_ID', variable: 'MINIO_PORT'),
                    string(credentialsId: 'MINIO_ACCESS_KEY_ID', variable: 'MINIO_ACCESS_KEY'),
                    string(credentialsId: 'MINIO_SECRET_KEY_ID', variable: 'MINIO_SECRET_KEY')
                ]) {
                    script {
                        sh """
                            export KUBECONFIG=${KUBECONFIG}
                            kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            # Création/mise à jour du secret
                            kubectl delete secret serviceupload-secret -n ${NAMESPACE} --ignore-not-found
                            kubectl create secret generic serviceupload-secret -n ${NAMESPACE} \\
                                --from-literal=MINIO_END_POINT="${MINIO_END_POINT}" \\
                                --from-literal=MINIO_PORT="${MINIO_PORT}" \\
                                --from-literal=MINIO_ACCESS_KEY="${MINIO_ACCESS_KEY}" \\
                                --from-literal=MINIO_SECRET_KEY="${MINIO_SECRET_KEY}"
                            kubectl apply -f ${K8S_DIR}/serviceupload-deployment.yaml
                            kubectl apply -f ${K8S_DIR}/serviceupload-service.yaml
                            kubectl apply -f ${K8S_DIR}/serviceupload-hpa.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }
    }
}